#!/usr/bin/env bash
#set -x

INITIALIZED="/data/chirpstack_tables_initialized"
BACKUPDONE="/data/chirpstack_backup_done"
EXTPATH="/share/chirp2mqtt"
DBFILE="chirp_db"
CONFILE="/data/options.json"
DEVICES="lorawan-devices"
IMPORTED="$EXTPATH/$DEVICES/imported"

backup_db() {
    if ! [ -d "$EXTPATH" ]; then
        mkdir $EXTPATH
        chown postgres:postgres $EXTPATH
    fi
    su-exec postgres pg_dump chirpstack  -w > $EXTPATH/$DBFILE
    if [ $? -eq 0 ]; then
        echo Backup done to $EXTPATH/$DBFILE, waiting for add-on restart
        touch $BACKUPDONE
        while true
        do
            sleep 300
        done
    else
        echo Backup failed, check logs
    fi
}

restore_db() {
    if [ -f "$EXTPATH/$DBFILE" ]; then
        su-exec postgres psql -c "drop database if exists chirpstack;"
        su-exec postgres psql -c "drop role if exists chirpstack;"
        su-exec postgres psql -c "create role chirpstack with login password 'chirpstack';"
        su-exec postgres psql -c "create database chirpstack with owner chirpstack;"
        su-exec postgres psql -d chirpstack < $EXTPATH/$DBFILE >/dev/null
        if [[ $? -eq 0 ]]; then
            touch $INITIALIZED
            mv $EXTPATH/$DBFILE $EXTPATH/$DBFILE.restored
            echo Database restored, backup file renamed to $DBFILE.restored
        else
            echo Database restored failed, check logs for details
        fi
    else
        echo Database backup file $EXTPATH/$DBFILE could not be processed
    fi
}

# set user name in chirpstack/bridge and region configuration files
MQTT_USER=$(jq --raw-output '.mqtt_user // empty' $CONFILE)
sed -i -r  's|username.*=.*".*"|username = "'$MQTT_USER'"|' /etc/chirpstack/chirpstack.toml
sed -i -r  's|username.*=.*".*"|username = "'$MQTT_USER'"|' /etc/chirpstack/region_*.toml
sed -i -r  's|username.*=.*".*"|username = "'$MQTT_USER'"|' /etc/chirpstack-gateway-bridge/chirpstack-gateway-bridge.toml

# set password in chirpstack/bridge and region configuration files
MQTT_PASSWORD=$(jq --raw-output '.mqtt_password // empty' $CONFILE)
sed -i -r  's|password.*=.*".*"|password = "'$MQTT_PASSWORD'"|' /etc/chirpstack/chirpstack.toml
sed -i -r  's|password.*=.*".*"|password = "'$MQTT_PASSWORD'"|' /etc/chirpstack/region_*.toml
sed -i -r  's|password.*=.*".*"|password = "'$MQTT_PASSWORD'"|' /etc/chirpstack-gateway-bridge/chirpstack-gateway-bridge.toml

# set region in chirpstack and gateway configuration files
LORA_REGION=$(jq --raw-output '.lora_region // empty' $CONFILE)
sed -i 's|"eu868"|"'$LORA_REGION'"|' /etc/chirpstack/chirpstack.toml
sed -i 's|eu868/|'$LORA_REGION'/|' /etc/chirpstack-gateway-bridge/chirpstack-gateway-bridge.toml
echo Lora region $LORA_REGION selected

# set secret in chirpstack configuration file
CHIRPSTACK_SECRET=$(jq --raw-output '.chirpstack_secret // empty' $CONFILE)
sed -i -r  's|secret.*=.*".*"|secret = "'$CHIRPSTACK_SECRET'"|' /etc/chirpstack/chirpstack.toml
echo ChirpStack secret $CHIRPSTACK_SECRET

DB_ACTION=$(jq --raw-output '.database_actions // empty' $CONFILE)
echo Database action: $DB_ACTION

if [ "$DB_ACTION" = "Backup and restore" ]; then
    if [ -f "$BACKUPDONE" ]; then
        restore_db
    else
        backup_db
    fi
fi

if [ -f "$BACKUPDONE" ]; then
    rm $BACKUPDONE
fi

if [ "$DB_ACTION" = "Restore" ]; then
    restore_db
fi

if [ "$DB_ACTION" = "Backup" ]; then
    backup_db
fi

# prepare database for ChirpStack
if ! [ -f "$INITIALIZED" ]; then
    su-exec postgres psql -c "drop database if exists chirpstack;"
    su-exec postgres psql -c "drop role if exists chirpstack;"
    su-exec postgres psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --no-password --no-psqlrc -f /etc/postgres_chirp.sql
    if [[ $? -eq 0 ]]; then
        touch $INITIALIZED
        echo Database created
    else
        echo Database create failed, check logs for details
    fi
fi

# import LoraWan device templates if repository found on HA /share
if [ -f "$EXTPATH/$DEVICES" ]; then
    if ! [ -f "$IMPORTED" ]; then
        chirpstack -c /etc/chirpstack import-legacy-lorawan-devices-repository -d "$EXTPATH/$DEVICES" >/dev/null
        if [[ $? -eq 0 ]]; then
            touch $IMPORTED
        fi
    fi
fi

# import LoraWan device templates from configured git repository - download and import
IMPORT_ACTION=$(jq --raw-output '.import_actions // empty' $CONFILE)
if ! [ "$IMPORT_ACTION" = "none" ]; then
    echo Importing LoraWan devices from: $IMPORT_ACTION
    if [ -d "/data/temp" ]; then
        rm -r /data/temp
    fi
    mkdir /data/temp
    git clone $IMPORT_ACTION /data/temp/lorawan-devices >/dev/null 2>/dev/null
    if [[ $? -eq 0 ]]; then
        chirpstack -c /etc/chirpstack import-legacy-lorawan-devices-repository -d /data/temp/lorawan-devices >/dev/null
        echo Importing completed with return code $?
    else
        echo git clone completed with return code $?
    fi
    rm -r /data/temp
fi

# copy chirpstack/gateway configuration files to /etc replacing package defaults, files are copied as is
if [ -d "$EXTPATH/etc/chirpstack" ]; then
    cp $EXTPATH/etc/chirpstack/* /etc/chirpstack
fi
if [ -d "$EXTPATH/etc/chirpstack-gateway-bridge" ]; then
    cp $EXTPATH/etc/chirpstack-gateway-bridge/* /etc/chirpstack-gateway-bridge
fi

# remove any api keys owned by chirpha from ChirpStack database
su-exec postgres psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --no-password --no-psqlrc -f /etc/delete_ha_api_keys.sql

signal_chirpstack &
chirpstack -c /etc/chirpstack
